# -*- coding: utf-8 -*-
"""TAGDI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F61llcm-BVzRl5bq-oT7poxQPd9Yp2id
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.metrics import mean_squared_error as mse
import matplotlib
import csv
from google.colab import drive
drive.mount('/content/drive')

#import os
#print(os.getcwd())

df = pd.read_csv('./drive/MyDrive/temp/acidentes2021.csv', error_bad_lines=False, quoting=csv.QUOTE_NONE,delimiter=';')

"""# Analise inicial

O projeto tem como proposito tratar e analisar os dados referentes aos acidentes de transito na RMR
"""

pd.set_option('display.max_columns', None)
df.head(100)

df.shape

df.columns

"""Para facilitar analise de pontos mais relevantes vamos remover colunas que não adicionam muito valor a analise """

df = df[['data','hora','natureza_acidente','bairro','endereco','tipo','auto','moto','ciclom','ciclista','pedestre','onibus','caminhao','viatura','vitimas','vitimasfatais','tempo_clima','situacao_semaforo','sinalizacao','condicao_via','conservacao_via','velocidade_max_via','mao_direcao']]

"""**Pré processamento**

Verificando e transformando os tipos
"""

df.dtypes

"""Temos diversas colunas do tipo object(strings), podemos transformalas em categorias, mas precisamos verificar a consistencia dos dados"""

#verificando bairros categorizados erradamente
df = df[df['bairro'].notna()]
a = df['bairro'].unique()
print(sorted(a))

#verificando enderecos categorizados erradamente
df = df[df['endereco'].notna()]
a = df['endereco'].unique()
print(sorted(a))

print(df['velocidade_max_via'].unique())

"""Vemos inconsistência na coluna de velocidade maxima, vamos padronizar os valores"""

df['velocidade_max_via']=df['velocidade_max_via'].str.lower()
df['velocidade_max_via']=df['velocidade_max_via'].str.replace('km/h','')
df['velocidade_max_via']=df['velocidade_max_via'].str.replace('km','')
df['velocidade_max_via']=df['velocidade_max_via'].str.strip()

print(df['velocidade_max_via'].unique())

df = df[df['natureza_acidente'].notna()]
a = df['natureza_acidente'].unique()
print(sorted(a))

df = df[df['tipo'].notna()]
a = df['tipo'].unique()
print(sorted(a))

"""Vemos dois tipos que podem ser agrupados em um e manter a mesma semântica"""

df['tipo'] = df['tipo'].replace(['OUTROS APOIOS'],'OUTROS')

print(df['tempo_clima'].unique())
print(df['situacao_semaforo'].unique())
print(df['sinalizacao'].unique())
print(df['condicao_via'].unique())
print(df['conservacao_via'].unique())

df.isnull().sum()

"""Podemos ver que existe grande numero de fileiras com NaN , não podemos simplismentes elimina-las sem perder muita informação

# Inputando dados
Podemos deduzir a velocidade_max_via com base no endereco e mao_direcao
"""

df = df.sort_values(by=['endereco','velocidade_max_via'])

"""E.g Se temos uma entrada com endereço: Av joão de barros e velocidade_max_via:60 podemos extender este valor de 60km/h a outras entradas do mesmo endereço"""

df['velocidade_max_via'] = df['velocidade_max_via'].fillna(method='ffill')
df['mao_direcao'] = df['mao_direcao'].fillna(method='ffill')

"""Podemos deduzir as condições metereologicas com base nas condições do mesmo dia naquele bairro

E.g Se temos uma entrada com bairro: Aflitos, data:21/02/2021,tempo_clima: chuvoso  podemos extender este valor de tempo_clima a outras entradas do mesmo bairro na mesma epoca
"""

df = df.sort_values(by=['data','bairro'])
df['tempo_clima'] = df['tempo_clima'].fillna(method='ffill')
df['condicao_via'] = df['condicao_via'].fillna(method='ffill')

"""Conservacao_via possui um valor coringa "outros" que pode ser utilizado para substituir  NaN"""

print(df['conservacao_via'].unique())
df['conservacao_via'] = df['conservacao_via'].fillna("Outros")

df.isnull().sum()

print(df['situacao_semaforo'].unique())
print(df['sinalizacao'].unique())

"""Podemos inputar o valor "Não informado" para preencher NaNs nestas duas colunas"""

df['situacao_semaforo'] = df['situacao_semaforo'].fillna("Não informado")
df['sinalizacao'] = df['sinalizacao'].fillna("Não informado")

df.isnull().sum()

"""Criamos uma nova coluna com o numero de envolvidos no acidente que torna melhor a visualização macro do acidente

Obs: esta coluna não denota o numero de pessoas envolvidas, pois um onibus pode ter mais de uma pessoa ocupante , um acidente com um onibus então pode trazer N vitimas
"""

df['numero_envolvidos'] = df['auto'] + df['moto']+df['ciclom']+df['ciclista']+df['pedestre']+df['onibus']+df['caminhao']+df['viatura']

"""Tratado os dados podemos transforma-los de maneira apropiada """

for col in ['natureza_acidente', 'bairro','endereco','tipo','tempo_clima','situacao_semaforo','sinalizacao','condicao_via','conservacao_via','velocidade_max_via','mao_direcao']:
    df[col] = df[col].astype('category')
df['data'] =  pd.to_datetime(df['data'], format='%Y-%m-%d')
df['hora'] =  pd.to_datetime(df['hora'], format='%H:%M:%S').dt.time

df_para_ia = df

"""# Cuidando dos outliers"""

df.describe()

"""É estranho um acidente com 0 envolvidos, também é muito fora do padrão (mas não impossivel) um acidente com 11 vitimas"""

print(df['data'].agg(['min', 'max']))
print(df['hora'].agg(['min', 'max']))

"""A data e hora estão dentro do esperado """

df['vitimas'].sort_values()

"""Não está errado, nem fora do possivel um acidente com mais de 6 pessoas, mas por ser muito fora da curva e para fins didaticos achei interessante remove-los"""

#0 envolvidos não categoriza um acidente
df = df[df.numero_envolvidos != 0]

#z score de todas as colunas numericas
df_z_score = (df.select_dtypes(include=[np.number])).apply(stats.zscore)
df_z_score

df_z_score.shape

# df_z_score["numero_envolvidos"].sort_values()
# df_z_score.boxplot('numero_envolvidos')
df_z_score.hist(column ='numero_envolvidos')

"""Podemos ver que a maioria absoluta tem zscore menor que 3"""

df_z_score.hist(column ='vitimas')

"""Podemos ver que a maioria absoluta tem zscore menor que 2"""

df["numero_envolvidos_z_score"] = df_z_score["numero_envolvidos"]
df["vitimas_z_score"] = df_z_score["vitimas"]
df = df[df.numero_envolvidos_z_score < 3]
df = df[df.vitimas_z_score < 2]

df['dia_da_semana'] = df['data'].dt.day_name()

df.shape

"""

```
# Isto está formatado como código
```

# **Estatísticas e visualização (plotagens)**"""

df.columns

df.describe()

df.cov()

df.corr()

df["bairro"].str.get_dummies().sum().sort_values(ascending=False).plot(
    kind='pie' 
    ,title='Acidentes por bairro'
    ,figsize=(12, 12)
    ,startangle = 90)
plt.show()

#plotando o gráfico de pizza com número de acidentes por bairro: não ficou bom

df["bairro"].str.get_dummies().sum().sort_values(ascending=False).plot(
    kind='bar', 
    title='Acidentes por bairro',
    figsize=(25,8))
plt.show()

#gráfico de barras lidou muito melhor com a quantidade de itens no eixo x

df.groupby(by="bairro")["ciclista"].sum().sort_values(ascending=False).plot(
    kind='bar', 
    title='Números de ciclistas acidentados por bairro',
    figsize=(25,8))
plt.show()

#gráfico acidentes com ciclistas x bairro

df['dia_semana'] = df['data'].dt.dayofweek
df['dia_semana'].hist()

df_ciclistas = df[df.ciclista >0]
df_ciclistas['dia_semana'].hist()

"""**IA**"""

df_para_ia.head()

#transformando colunas de texto em numericas

df_para_ia['data'] = df_para_ia['data'].astype('category')
df_para_ia['hora'] = df_para_ia['hora'].astype('category')
df_para_ia['natureza_acidente'] = df_para_ia['natureza_acidente'].astype('category')
df_para_ia['bairro'] = df_para_ia['bairro'].astype('category')
df_para_ia['endereco'] = df_para_ia['endereco'].astype('category')
df_para_ia['tipo'] = df_para_ia['tipo'].astype('category')
df_para_ia['tempo_clima'] = df_para_ia['tempo_clima'].astype('category')
df_para_ia['situacao_semaforo'] = df_para_ia['situacao_semaforo'].astype('category')
df_para_ia['sinalizacao'] = df_para_ia['sinalizacao'].astype('category')
df_para_ia['condicao_via'] = df_para_ia['condicao_via'].astype('category')
df_para_ia['conservacao_via'] = df_para_ia['conservacao_via'].astype('category')
df_para_ia['velocidade_max_via'] = df_para_ia['velocidade_max_via'].astype('category')
df_para_ia['mao_direcao'] = df_para_ia['mao_direcao'].astype('category')


df_para_ia['data'] = df_para_ia['data'].cat.codes
df_para_ia['hora'] = df_para_ia['hora'].cat.codes
df_para_ia['natureza_acidente'] = df_para_ia['natureza_acidente'].cat.codes
df_para_ia['bairro'] = df_para_ia['bairro'].cat.codes
df_para_ia['endereco'] = df_para_ia['endereco'].cat.codes
df_para_ia['tipo'] = df_para_ia['tipo'].cat.codes
df_para_ia['tempo_clima'] = df_para_ia['tempo_clima'].cat.codes
df_para_ia['situacao_semaforo'] = df_para_ia['situacao_semaforo'].cat.codes
df_para_ia['sinalizacao'] = df_para_ia['sinalizacao'].cat.codes
df_para_ia['condicao_via'] = df_para_ia['condicao_via'].cat.codes
df_para_ia['conservacao_via'] = df_para_ia['conservacao_via'].cat.codes
df_para_ia['velocidade_max_via'] = df_para_ia['velocidade_max_via'].cat.codes
df_para_ia['mao_direcao'] = df_para_ia['mao_direcao'].cat.codes

from sklearn.covariance import EllipticEnvelope
detector = EllipticEnvelope(contamination=0.01)
detector.fit(df_para_ia)

#import e treino da elliptic envelope, como visto em aula

df_para_ia.head(10)

scores = detector.predict(df_para_ia)

scores.any()

df_para_ia['ellipticEnvelope'] = scores

df_para_ia[df_para_ia['ellipticEnvelope'] == -1]

print(len(df_para_ia))
df_para_ia = df_para_ia[df_para_ia['ellipticEnvelope'] != -1]
print(len(df_para_ia))

lista = str(df["auto"].unique()).split("[")
lista = lista[1].split(" ")
lista[-1] = lista[-1].replace("]", "")
print(sorted(lista))

#valores distintos de carros nos acidentes

df["auto"].value_counts()

#numero de acidentes com cada valor de carro

df["auto"].value_counts(normalize=True)

#normalizando

import seaborn as sns
sns.set_style("whitegrid")
df["auto"].plot(kind='hist')

df['numero_envolvidos'].describe()

#número de veículos envolvidos por acidente

df['numero_envolvidos'].plot.box()

df.plot.scatter(x='vitimas',y='numero_envolvidos') #vitimas por veículo

#mapeamento de vitimas por número de veículos

df['vitimasPorVeiculo'] = df['vitimas'] / df['numero_envolvidos']

df['vitimasPorVeiculo'].describe()

df['vitimasPorVeiculo'].plot.box()

df['vitimasPorVeiculo'].hist()

#gráfico não simétrico!

df = df.dropna()
#dropar os valores = 0 por causa do log

df.isnull().values.any()

from numpy import log10
df['vitimasPorVeiculo_log'] = log10(df['vitimasPorVeiculo'])

df = df.loc[~((df['vitimasPorVeiculo'] == 0))]

df.head(100)

df['vitimasPorVeiculo_log'].hist()

#plot do log
#nenhum problema encontrado, tentando agora com IA:



